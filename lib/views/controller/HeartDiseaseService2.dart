import 'dart:convert';
import 'dart:async';
import 'dart:io';
import 'package:http/http.dart' as http;

class HeartDiseaseService2 {
  static const String baseUrl =
      'http://192.168.1.2:8000'; // IP WiFi c·ªßa m√°y t√≠nh
  static const Duration connectionTimeout = Duration(seconds: 5);
  static const Duration requestTimeout = Duration(seconds: 30);

  Future<Map<String, dynamic>> predictHeartDisease({
    required double bmi,
    required int smoking,
    required int alcoholDrinking,
    required int stroke,
    required double physicalHealth,
    required double mentalHealth,
    required int diffWalking,
    required int sex,
    required int ageCategory,
    required int race,
    required int diabetic,
    required int physicalActivity,
    required int genHealth,
    required double sleepTime,
    required int asthma,
    required int kidneyDisease,
    required int skinCancer,
  }) async {
    final url = Uri.parse('$baseUrl/predict');
    print('üì° Connecting to server at: $baseUrl');

    // Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc
    try {
      final ping = await InternetAddress.lookup('192.168.1.2');
      print('üîç Server IP lookup result: ${ping.first.address}');
    } catch (e) {
      print('‚ùå Cannot resolve server IP: $e');
      throw Exception('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra:\n'
          '1. M√°y ch·ªß ƒë√£ kh·ªüi ƒë·ªông ch∆∞a?\n'
          '2. ƒêi·ªán tho·∫°i v√† m√°y t√≠nh c√≥ c√πng m·∫°ng WiFi kh√¥ng?\n'
          '3. ƒê·ªãa ch·ªâ IP m√°y t√≠nh c√≥ ƒë√∫ng l√† 192.168.1.2 kh√¥ng?');
    }

    final Map<String, dynamic> requestBody = {
      'BMI': bmi,
      'Smoking': smoking,
      'AlcoholDrinking': alcoholDrinking,
      'Stroke': stroke,
      'PhysicalHealth': physicalHealth,
      'MentalHealth': mentalHealth,
      'DiffWalking': diffWalking,
      'Sex': sex,
      'AgeCategory': ageCategory,
      'Race': race,
      'Diabetic': diabetic,
      'PhysicalActivity': physicalActivity,
      'GenHealth': genHealth,
      'SleepTime': sleepTime,
      'Asthma': asthma,
      'KidneyDisease': kidneyDisease,
      'SkinCancer': skinCancer,
    };

    print('üì§ Sending request with data: $requestBody');

    final client = http.Client();
    try {
      final response = await client
          .post(
            url,
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
            },
            body: json.encode(requestBody),
          )
          .timeout(requestTimeout);

      print('üì• Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        print('üì• Response data: $decoded');
        return json.decode(decoded);
      } else {
        print('‚ùå Server error: ${response.body}');
        throw Exception(
            'M√°y ch·ªß tr·∫£ v·ªÅ l·ªói: ${response.statusCode}\n${response.body}');
      }
    } on SocketException catch (e) {
      print('üåê Network error: $e');
      throw Exception('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra:\n'
          '1. ƒêi·ªán tho·∫°i ƒë√£ k·∫øt n·ªëi WiFi ch∆∞a?\n'
          '2. M√°y t√≠nh v√† ƒëi·ªán tho·∫°i c√πng m·∫°ng WiFi?\n'
          '3. T∆∞·ªùng l·ª≠a Windows ƒë√£ t·∫Øt ch∆∞a?');
    } on TimeoutException catch (e) {
      print('‚è∞ Request timeout: $e');
      throw Exception('Y√™u c·∫ßu qu√° th·ªùi gian ch·ªù.\n'
          'Vui l√≤ng:\n'
          '1. Ki·ªÉm tra t·ªëc ƒë·ªô m·∫°ng\n'
          '2. Th·ª≠ l·∫°i sau');
    } catch (e) {
      print('‚ùå Other error: $e');
      throw Exception('C√≥ l·ªói x·∫£y ra: $e');
    } finally {
      client.close();
    }
  }
}
